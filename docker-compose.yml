services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "5001:5000"
    volumes:
      # Mount data directory for persistence
      - ./backend/data:/app/backend/data
      # Mount entire backend directory for hot-reload
      - ./backend:/app/backend
      # Mount legal-dashboard for compatibility (from archive)
      - ./archive/old-structure/legal-dashboard:/app/legal-dashboard
    environment:
      # SECURITY: API keys now stored encrypted in database
      # Only ENCRYPTION_KEY needed to decrypt provider API keys from database
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD=legal_dashboard_2025
      - DATABASE_URL=postgresql://legal_user:legal_dashboard_2025@postgres:5432/legal_dashboard
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - legal-dashboard-network
    command: python app.py
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      # Mount entire frontend directory for hot-reload
      - ./frontend:/app
      # Prevent node_modules from being overwritten
      - /app/node_modules
    environment:
      - VITE_API_URL=http://backend:5000
    depends_on:
      - backend
    networks:
      - legal-dashboard-network
    restart: unless-stopped

  # Docker Management UI
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - legal-dashboard-network

  # Log Monitoring UI
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DOZZLE_LEVEL=info
      - DOZZLE_TAILSIZE=300
      - DOZZLE_FILTER=name=backend,name=frontend
    networks:
      - legal-dashboard-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=legal_dashboard
      - POSTGRES_USER=legal_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-legal_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - legal-dashboard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U legal_user -d legal_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  legal-dashboard-network:
    driver: bridge

volumes:
  portainer_data:
  postgres_data:
